import streamlit as st
import time
from apps.traccion.traccion_calculator import TraccionCalculator
from apps.traccion.traccion_visualizer import TraccionVisualizer

def render_traccion_app():
    # Inicializar calculadora y visualizador
    if 'traccion_calculator' not in st.session_state:
        st.session_state.traccion_calculator = TraccionCalculator()
    if 'traccion_visualizer' not in st.session_state:
        st.session_state.traccion_visualizer = TraccionVisualizer()
    if 'traccion_running' not in st.session_state:
        st.session_state.traccion_running = False
    
    calculator = st.session_state.traccion_calculator
    visualizer = st.session_state.traccion_visualizer
    
    # T√≠tulo
    st.title("üí™ Simulador de Ensayo de Tracci√≥n")
    st.markdown("""
    Esta aplicaci√≥n simula el ensayo de tracci√≥n en diferentes materiales, 
    permitiendo visualizar y comparar sus curvas esfuerzo-deformaci√≥n.
    """)
    
    # Layout de dos columnas
    col1, col2 = st.columns([1, 2])
    
    # Panel de control (columna izquierda)
    with col1:
        st.subheader("Control de Ensayo")
        
        # Selecci√≥n de material
        material = st.selectbox(
            "Material",
            options=['acero', 'aluminio', 'cobre'],
            format_func=lambda x: x.capitalize()
        )
        
        # Propiedades del material seleccionado
        props = calculator.get_material_properties(material)
        
        with st.expander("Propiedades del Material", expanded=True):
            st.write(f"M√≥dulo de elasticidad: {props['modulo_elasticidad']} GPa")
            st.write(f"L√≠mite el√°stico: {props['limite_elastico']} MPa")
            st.write(f"Resistencia a la tracci√≥n: {props['resistencia_traccion']} MPa")
            st.write(f"Coeficiente de Poisson: {props['coef_poisson']}")
        
        # Controles de simulaci√≥n
        col_ctrl1, col_ctrl2 = st.columns(2)
        
        with col_ctrl1:
            if st.button("‚ñ∂ Iniciar" if not st.session_state.traccion_running else "‚è∏ Pausar"):
                st.session_state.traccion_running = not st.session_state.traccion_running
        
        with col_ctrl2:
            if st.button("‚ü≤ Reiniciar"):
                calculator.reset_simulation()
                visualizer.reset_data(material)
                st.session_state.traccion_running = False
        
        if st.button("üóë Limpiar Todo"):
            calculator.reset_simulation()
            visualizer.reset_data()
            st.session_state.traccion_running = False
    
    # Panel de visualizaci√≥n (columna derecha)
    with col2:
        # Crear contenedor para la gr√°fica
        plot_container = st.empty()
        
        # Actualizar simulaci√≥n
        if st.session_state.traccion_running:
            strain = calculator.get_next_strain()
            if strain is not None:
                stress = calculator.calculate_stress_strain(material, strain)
                visualizer.update_data(material, strain, stress)
            else:
                st.session_state.traccion_running = False
        
        # Mostrar gr√°fica
        fig = visualizer.create_figure()
        plot_container.plotly_chart(fig, use_container_width=True)
        
        # Ecuaciones
        with st.expander("Ecuaciones Fundamentales"):
            st.latex(r"\sigma = E\varepsilon \quad \text{(Regi√≥n el√°stica)}")
            st.latex(r"\sigma = \sigma_y + H\varepsilon_p \quad \text{(Regi√≥n pl√°stica)}")
            
            st.markdown("""
            Donde:
            - œÉ: Esfuerzo normal
            - E: M√≥dulo de elasticidad
            - Œµ: Deformaci√≥n unitaria
            - œÉ_y: L√≠mite el√°stico
            - H: Factor de endurecimiento
            - Œµ_p: Deformaci√≥n pl√°stica
            """)
        
        # Rerun para actualizaci√≥n continua
        if st.session_state.traccion_running:
            time.sleep(0.1)  # Controlar velocidad de actualizaci√≥n
            st.rerun()
