import streamlit as st
import numpy as np
from apps.indeterminacion.indeterminacion_calculator import IndeterminacionCalculator, CableParameters, MaterialProperties
from apps.indeterminacion.indeterminacion_visualizer import IndeterminacionVisualizer

def format_scientific(value: float, unit: str) -> str:
    """Formatea un valor cient√≠fico con unidades."""
    if abs(value) < 0.001 or abs(value) > 1000:
        return f"{value:.2e} {unit}"
    return f"{value:.3f} {unit}"

def render_indeterminacion_app():
    # Inicializar calculadora y visualizador
    if 'indeterminacion_calculator' not in st.session_state:
        st.session_state.indeterminacion_calculator = IndeterminacionCalculator()
    if 'indeterminacion_visualizer' not in st.session_state:
        st.session_state.indeterminacion_visualizer = IndeterminacionVisualizer()
    
    calculator = st.session_state.indeterminacion_calculator
    visualizer = st.session_state.indeterminacion_visualizer
    
    # T√≠tulo
    st.title("üîó An√°lisis de Fuerzas en Cables")
    st.markdown("""
    Esta aplicaci√≥n analiza la distribuci√≥n de fuerzas en un sistema de dos cables que soportan una barra r√≠gida.
    Permite calcular las fuerzas en cada cable y visualizar la deformaci√≥n del sistema.
    """)
    
    # Layout de dos columnas
    col1, col2 = st.columns([1, 2])
    
    # Panel de entrada (columna izquierda)
    with col1:
        st.subheader("Par√°metros de Entrada")
        
        # Bot√≥n para generar ejemplo aleatorio
        if st.button("Generar Ejemplo Aleatorio", key='random'):
            cable1, cable2, load = calculator.generate_random_example()
            st.session_state.update({
                'material1': 'Acero',
                'area1': cable1.A * 1e6,  # Convertir a mm¬≤
                'length1': cable1.L,
                'material2': 'Acero',
                'area2': cable2.A * 1e6,
                'length2': cable2.L,
                'load': load
            })
            st.rerun()
        
        # Cable 1
        with st.expander("Cable 1", expanded=True):
            material1 = st.selectbox(
                "Material",
                ["Acero", "Aluminio", "Titanio", "Personalizado"],
                key='material1',
                help="Selecciona el material del cable 1"
            )
            
            if material1 == "Personalizado":
                E1 = st.number_input(
                    "M√≥dulo de Young (GPa)",
                    min_value=1.0,
                    value=200.0,
                    key='custom_E1',
                    help="M√≥dulo de elasticidad del material"
                ) * 1e9
            else:
                E1 = calculator.materials[material1]
            
            area1 = st.number_input(
                "√Årea (mm¬≤)",
                min_value=1.0,
                value=100.0,
                key='area1',
                help="√Årea de la secci√≥n transversal del cable"
            )
            
            length1 = st.number_input(
                "Longitud (m)",
                min_value=0.1,
                value=2.0,
                key='length1',
                help="Longitud total del cable"
            )
        
        # Cable 2
        with st.expander("Cable 2", expanded=True):
            material2 = st.selectbox(
                "Material",
                ["Acero", "Aluminio", "Titanio", "Personalizado"],
                key='material2',
                help="Selecciona el material del cable 2"
            )
            
            if material2 == "Personalizado":
                E2 = st.number_input(
                    "M√≥dulo de Young (GPa)",
                    min_value=1.0,
                    value=200.0,
                    key='custom_E2',
                    help="M√≥dulo de elasticidad del material"
                ) * 1e9
            else:
                E2 = calculator.materials[material2]
            
            area2 = st.number_input(
                "√Årea (mm¬≤)",
                min_value=1.0,
                value=100.0,
                key='area2',
                help="√Årea de la secci√≥n transversal del cable"
            )
            
            length2 = st.number_input(
                "Longitud (m)",
                min_value=0.1,
                value=2.0,
                key='length2',
                help="Longitud total del cable"
            )
        
        # Carga
        with st.expander("Carga", expanded=True):
            load = st.number_input(
                "Carga (N)",
                min_value=1.0,
                value=10000.0,
                key='load',
                help="Fuerza aplicada en el centro de la barra"
            )
    
    # Panel de visualizaci√≥n y resultados (columna derecha)
    with col2:
        try:
            # Crear objetos CableParameters
            cable1_params = CableParameters(
                E=E1,
                A=area1 * 1e-6,  # Convertir mm¬≤ a m¬≤
                L=length1
            )
            
            cable2_params = CableParameters(
                E=E2,
                A=area2 * 1e-6,  # Convertir mm¬≤ a m¬≤
                L=length2
            )
            
            # Calcular resultados
            results = calculator.calculate_forces(cable1_params, cable2_params, load)
            
            # Mostrar visualizaci√≥n
            fig = visualizer.create_figure(length1, length2, load, results)
            st.pyplot(fig)
            
            # Mostrar resultados
            st.subheader("Resultados")
            col_res1, col_res2 = st.columns(2)
            
            with col_res1:
                st.metric(
                    "Fuerza en Cable 1",
                    f"{results['F1']:.1f} N ({results['F1_percentage']:.1f}%)"
                )
                st.metric(
                    "Deformaci√≥n Cable 1",
                    f"{results['delta1']*1000:.2f} mm"
                )
            
            with col_res2:
                st.metric(
                    "Fuerza en Cable 2",
                    f"{results['F2']:.1f} N ({results['F2_percentage']:.1f}%)"
                )
                st.metric(
                    "Deformaci√≥n Cable 2",
                    f"{results['delta2']*1000:.2f} mm"
                )
            
            # Mostrar soluci√≥n paso a paso
            st.subheader("Proceso de Soluci√≥n")
            steps = calculator.generate_solution_steps(
                cable1_params, cable2_params, load, results
            )
            
            for step in steps:
                with st.expander(step["title"], expanded=False):
                    st.markdown(step["content"])
                    st.latex(step["equation"])
            
            # Teor√≠a
            with st.expander("Teor√≠a", expanded=False):
                st.markdown("""
                Este problema involucra el an√°lisis de una barra r√≠gida sostenida por dos cables con diferentes propiedades.
                La soluci√≥n requiere aplicar:
                
                1. **Equilibrio de Fuerzas**
                   - La suma de fuerzas verticales debe ser cero
                   - F‚ÇÅ + F‚ÇÇ = P
                
                2. **Ley de Hooke**
                   - Relaciona la fuerza con la deformaci√≥n en cada cable
                   - œÉ = E ¬∑ Œµ
                   - F = (AE‚àÜL)/L
                
                3. **Compatibilidad de Deformaciones**
                   - Al ser una barra r√≠gida, el desplazamiento vertical es igual para ambos cables
                   - ‚àÜL‚ÇÅ = ‚àÜL‚ÇÇ
                   - F‚ÇÅL‚ÇÅ/(E‚ÇÅA‚ÇÅ) = F‚ÇÇL‚ÇÇ/(E‚ÇÇA‚ÇÇ)
                """)
        
        except Exception as e:
            st.error(f"Error en la simulaci√≥n: {str(e)}")
            st.error("Por favor, verifique los par√°metros de entrada.")

if __name__ == "__main__":
    render_indeterminacion_app()
